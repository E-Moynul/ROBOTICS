[GIT CLONING , creating NAME.CPP]
cd ~/catkin_ws/src/
git clone https://bitbucket.org/theconstructcore/cpp_course_repo.git

cd ~/catkin_ws/src/cpp_course_repo/utilities/
touch name.cpp
-------------------------------------------------------
[CODE]
#include <iostream>

int main() {
    printf("Hello\n");
    return 0;
}
-------------------------------------------------------
[COMPILATION]
g++ -std=c++11 name.cpp -o name_compiled

./name_compiled

-------------------------------------------------------
[CODE]
#include "rosbot_control/rosbot_class.h"
#include <ros/ros.h>

using namespace std;

int main(int argc, char **argv) {
  ros::init(argc, argv, "rosbot_node");

  RosbotClass myob;
  myob.move();

  float n = myob.get_position(1);

  ROS_INFO_STREAM(n);
}
-------------------------------------------------------
[GOTO FOLDER]
cd ~/catkin_ws
[COMPILE]
catkin_make
source devel/setup.bash
[RUN]
rosrun FOLDER_NAME CPP_FILE_NAME
(CPP_FILE_MUST_BE_IN_SRC_FOLDER)
-------------------------------------------------------
[CODE]
#include "rosbot_control/rosbot_class.h"
#include <ros/ros.h>

using namespace std;

int main(int argc, char **argv) {
  ros::init(argc, argv, "rosbot_node");

  RosbotClass rosbot;
  rosbot.move();

  float x_1 = rosbot.get_position(1);
  float y_1 = rosbot.get_position(2);

  ROS_INFO_STREAM(x_1 << " and " << y_1);

  rosbot.move();

  float x_2 = rosbot.get_position(1);
  float y_2 = rosbot.get_position(2);

  ROS_INFO_STREAM(x_2 << " and " << y_2);

  return 0;
}
-------------------------------------------------------
[CODE]
#include "rosbot_control/rosbot_class.h"
#include <iostream>
#include <list>
#include <map>
#include <ros/ros.h>
#include <string>

using namespace std;

int main(int argc, char **argv) {
  ros::init(argc, argv, "rosbot_node");

  RosbotClass rosbot;
  rosbot.move();

  float x_0 = rosbot.get_position(1);
  double t_0 = rosbot.get_time();

  ROS_INFO_STREAM(x_0 << " and " << t_0);
  rosbot.move();

  float x_1 = rosbot.get_position(1);
  double t_1 = rosbot.get_time();
  ROS_INFO_STREAM(x_1 << " and " << t_1);

  map<double, float> x_t_dictionary;
  x_t_dictionary[t_0] = x_0;
  x_t_dictionary[t_1] = x_1;

  for (auto item : x_t_dictionary) {
    ROS_INFO_STREAM("Time " << item.first << ", position " << item.second << " \n");
  }

  return 0;
}
-------------------------------------------------------
[CODE]
#include "rosbot_control/rosbot_class.h"
#include <iostream>
#include <ros/ros.h>

using namespace std;

int main(int argc, char **argv) {
  ros::init(argc, argv, "rosbot_node");

  RosbotClass rosbot;
  rosbot.move();

  float x_0 = rosbot.get_position(1);
  double t_0 = rosbot.get_time();

  rosbot.move();

  float x_1 = rosbot.get_position(1);
  double t_1 = rosbot.get_time();

  float speed = (x_1 - x_0)/(t_1 - t_0); 
  ROS_INFO_STREAM("Speed is lower than 1 m/s? " << (speed<=1.0) << "\n");


  return 0;
}
